import React, {useEffect, useState} from 'react';import cl from './Slider.module.css';import SliderThumbnails from "./SliderThumbnails";import {useSwipeable} from "react-swipeable";const Slider = ({images}) => {    const [screenWidth, setScreenWidth] = useState(window.innerWidth);    useEffect(() => {        const handleResize = event => {            setScreenWidth(event.target.innerWidth)            event.target.innerWidth <= 320 ?                setThumbnailClasses(thumbnailClasses.map((item, i) => {                    return i === 0 ? `${cl.phoneThumbnail} ${cl.active}` : cl.phoneThumbnail                }))                :                setThumbnailClasses(thumbnailClasses.map((item, i) => {                    return i === 0 ? `${cl.thumbnail} ${cl.active}` : cl.thumbnail                }))        }        window.addEventListener('resize', handleResize)        return () => {            window.removeEventListener('resize', handleResize)        }    }, []);    const isPhone = () => screenWidth <= 320    const [picIndex, setPicIndex] = useState(0)    const [imgClasses, setImgClasses] = useState([cl.img])    const [thumbnailClasses, setThumbnailClasses] = useState(images.map((item, index) => {        return index === picIndex ?            `${isPhone() ? cl.phoneThumbnail : cl.thumbnail} ${cl.active}`            :            isPhone() ? cl.phoneThumbnail : cl.thumbnail    }))    const swipeHandler = useSwipeable({        onSwipedLeft: () => {            console.log('left')        },        onSwipedRight: () => {            console.log(picIndex)            setPicIndex(picIndex - 1)            activatePic(picIndex)        },    })    const activatePic = (i) => {        console.log(picIndex)        setThumbnailClasses(thumbnailClasses.map((item, index) => {            return index === i ?                `${isPhone() ? cl.phoneThumbnail : cl.thumbnail} ${cl.active}`                :                isPhone() ? cl.phoneThumbnail : cl.thumbnail        }))    }    const handleMouseEnter = (i) => {        if (i !== picIndex) {            setPicIndex(i)            setImgClasses([cl.img, cl.visible])            setThumbnailClasses(thumbnailClasses.map(() => cl.thumbnail))            activatePic(i)        }    }    return (        <div className={cl.wrapper}>            <div className={cl.picture} {...swipeHandler}>                <img className={imgClasses.join(' ')}                     src={images[picIndex].original}                     alt='Фото продукта крупно.'                     onAnimationEnd={() => setImgClasses([cl.img])}                />            </div>            <SliderThumbnails                className={window.innerWidth <= 320 ? cl.phoneThumbList : cl.thumbList}                images={images}                onMouseEnter={handleMouseEnter}                classes={thumbnailClasses}            />        </div>    );};export default Slider;